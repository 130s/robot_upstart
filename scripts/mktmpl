#!/usr/bin/env python

import argparse, sys, string, os, stat

parser = argparse.ArgumentParser(description="Create executable template from input template file.")
parser.add_argument('infile', nargs='?', type=argparse.FileType('r'), 
                    default=sys.stdin)
parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'),
                    default=sys.stdout)
args = parser.parse_args()

template_text = args.infile.read()
subs = set()
for txt, sub, _, _ in string.Formatter().parse(template_text):
  if sub: subs.add(sub)

out = """#!/usr/bin/env python
import argparse, sys, string, os, stat
p = argparse.ArgumentParser(description='Executable template generated from {infile}.')
p.add_argument('outfile', nargs='?', type=argparse.FileType('w'),
               default=sys.stdout)
{template_args}
args, _ = p.parse_known_args()
args.outfile.write({template_text}.format(**vars(args)))
if {make_executable} and not args.outfile.isatty():
  os.chmod(args.outfile.name, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
"""

argstrings = [ "p.add_argument('--%s', type=str, required=True)" % sub for sub in subs ]

args.outfile.write(out.format(
    infile=args.infile.name,
    template_text=repr(template_text),
    template_args="\n".join(argstrings),
    make_executable=template_text.startswith("#!/")))

# Make the template executable
if not args.outfile.isatty():
  os.chmod(args.outfile.name, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
